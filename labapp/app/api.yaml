swagger: "2.0"
info:
  description: "LabApp API"
  version: "1.0.0"
  title: "LabApp API"
  contact:
    email: "norberto9411@gmail.com"
host: "localhost"
basePath: "/1.0"
tags:
- name: "recorder"
  description: "Sound recording device"
- name: "series"
  description: "Series of records"
- name: "record"
  description: "Sound record object"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /recorder:    
    get:
      tags:
      - "recorder"
      summary: "Return all recorders"
      description: ""
      operationId: "app.api.get_recorders"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Recorder"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "recorder"
      summary: "Add a new recorder to laboratory"
      description: ""
      operationId: "app.api.new_recorder"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Recorder object that needs to be added to the laboratory"
          required: true
          schema:
            $ref: "#/definitions/Recorder"
      responses:
        200:
          description: "Recorder added successfuly."
          schema:
            $ref: "#/definitions/Recorder"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
  /recorder/{recorder_uid}:    
    get:
      tags:
      - "recorder"
      summary: "Find recorder by UID"
      description: "Returns a single recorder"
      operationId: "app.api.get_recorder"
      produces:
        - "application/json"
      parameters:
      - name: "recorder_uid"
        in: "path"
        description: "UID of recorder to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Recorder"
        400:
          description: "Invalid UID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Recorder not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "recorder"
      summary: "Update recorder"
      description: ""
      operationId: "app.api.update_recorder"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "recorder_uid"
          description: "UID of recorder that will be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Recorder object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Recorder"
      responses:
        200:
          description: "Recorder added successfuly."
          schema:
            $ref: "#/definitions/Recorder"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Recorder not found."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "recorder"
      summary: "Deletes a recorder"
      description: ""
      operationId: "app.api.delete_recorder"
      produces:
      - "application/json"
      parameters:
      - name: "recorder_uid"
        in: "path"
        description: "Recorder uid to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "Recorder deleted successfuly."
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Recorder not found."
          schema:
            $ref: "#/definitions/Error"
  /series:    
    get:
      tags:
      - "series"
      summary: "Return all serieses"
      description: ""
      operationId: "app.api.get_serieses"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "recorder_uid"
          description: "UID of recorder, that adds records to series"
          type: "string"
        - in: "query"
          name: "created_from"
          description: "Starting date for serieses filtering"
          type: "string"
          format: "date-time"
        - in: "query"
          name: "created_to"
          description: "Ending date for serieses filtering"
          type: "string"
          format: "date-time"
        - in: "query"
          name: "min_duration"
          description: "Minimum duration for serieses filtering"
          type: "number"
        - in: "query"
          name: "max_duration"
          description: "Maximum duration for serieses filtering"
          type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Series"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "series"
      summary: "Add a new series"
      description: ""
      operationId: "app.api.new_series"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Series object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Series"
      responses:
        200:
          description: "Series added successfuly."
          schema:
            $ref: "#/definitions/Series"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
  /series/{series_uid}:    
    get:
      tags:
      - "series"
      summary: "Find series by UID"
      description: "Returns a single series"
      operationId: "app.api.get_series"
      produces:
        - "application/json"
      parameters:
      - name: "series_uid"
        in: "path"
        description: "UID of series to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Series"
        400:
          description: "Invalid UID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Series not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "series"
      summary: "Update series"
      description: ""
      operationId: "app.api.update_series"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "series_uid"
          description: "UID of series that will be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Series object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Series"
      responses:
        200:
          description: "Series added successfuly."
          schema:
            $ref: "#/definitions/Series"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Series not found."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "series"
      summary: "Deletes a series"
      description: ""
      operationId: "app.api.delete_series"
      produces:
      - "application/json"
      parameters:
      - name: "series_uid"
        in: "path"
        description: "Series uid to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "Series deleted successfuly."
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Series not found."
          schema:
            $ref: "#/definitions/Error"
  /record:    
    get:
      tags:
      - "record"
      summary: "Return all records"
      description: ""
      operationId: "app.api.get_records"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Record"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "record"
      summary: "Add a new record"
      description: ""
      operationId: "app.api.new_record"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Record object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Record"
      responses:
        200:
          description: "Record added successfuly."
          schema:
            $ref: "#/definitions/Record"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
  /record/{record_uid}:    
    get:
      tags:
      - "record"
      summary: "Find record by UID"
      description: "Returns a single record"
      operationId: "app.api.get_record"
      produces:
        - "application/json"
      parameters:
      - name: "record_uid"
        in: "path"
        description: "UID of record to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Record"
        400:
          description: "Invalid UID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Record not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - "record"
      summary: "Update record"
      description: ""
      operationId: "app.api.update_record"
      consumes:
        - "application.json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "record_uid"
          description: "UID of record that will be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Record object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Record"
      responses:
        200:
          description: "Record added successfuly."
          schema:
            $ref: "#/definitions/Record"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - "record"
      summary: "Deletes a record"
      description: ""
      operationId: "app.api.delete_record"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "record_uid"
          description: "Record uid to delete"
          required: true
          type: "string"
      responses:
        204:
          description: "Record deleted successfuly."
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/Error"
  /record/{record_uid}/upload:
    post:
      tags:
        - "record"
      summary: "Upload sound record file"
      description: ""
      operationId: "app.api.upload_record"
      consumes:
        - "multipart/form-data"
      parameters:
        - in: "path"
          name: "record_uid"
          description: "UID of record that file of will be updated"
          required: true
          type: "string"
        - in: "formData"
          name: "recordfile"
          description: "Recorded sound file .wav to upload"
          type: "file"
      responses:
        200:
          description: "Record file uploaded successfuly."
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Operation not permitted."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/Error"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Recorder:
    type: "object"
    required:
      - "uid"
    properties:
      uid:
        type: "string"
      location_description:
        type: "string"
  Series:
    type: "object"
    required:
      - "uid"
      - "recorder_uid"
    properties:
      uid:
        type: "string"
      recorder_uid:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      min_duration:
        type: "number"
      max_duration:
        type: "number"
  Record:
    type: "object"
    required:
      - "uid"
      - "series_uid"
    properties:
      uid:
        type: "string"
      series_uid:
        type: "string"
      duration:
        type: "number"
      samplerate:
        type: "integer"
      channels:
        type: "integer"
      start_time:
        type: "string"
        format: "date-time"
      uploaded_at:
        type: "string"
        format: "date-time"
      label:
        type: "string"
      filepath:
        type: "string"
  Error:
    type: "object"
    properties:
      detail:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"