openapi: '3.0.0'
info:
  description: LabApp API
  version: '1.0.0'
  title: LabApp API
  contact:
    email: norberto9411@gmail.com
servers:
  - url: http://localhost/{version}
    variables:
      version:
        default: '1.0'
tags:
- name: recorder
  description: Sound recording device
- name: series
  description: Series of records
- name: record
  description: Sound record object
paths:
  /recorder:    
    get:
      tags:
      - recorder
      summary: Return all recorders
      operationId: app.api.get_recorders
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recorder'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
    post:
      tags:
        - recorder
      summary: Add a new recorder to laboratory
      operationId: app.api.new_recorder
      requestBody:
        description: Recorder object to add to laboratory
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recorder'
      responses:
        200:
          description: Recorder added successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recorder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
  /recorder/{recorder_uid}:    
    get:
      tags:
      - recorder
      summary: Find recorder by UID and return
      operationId: app.api.get_recorder
      parameters:
      - name: recorder_uid
        in: path
        description: UID of recorder to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recorder'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - recorder
      summary: Update recorder
      operationId: app.api.update_recorder
      requestBody:
        description: Recorder object to update
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Recorder'
      parameters:
        - name: recorder_uid
          in: path
          description: UID of recorder that will be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Recorder updated successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recorder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - recorder
      summary: Deletes a recorder
      operationId: app.api.delete_recorder
      parameters:
        - name: recorder_uid
          in: path
          description: UID if recorder that will be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Recorder deleted successfuly.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
  /series:    
    get:
      tags:
        - series
      summary: Return all serieses
      operationId: app.api.get_serieses
      parameters:
        - in: query
          name: recorder_uid
          description: UID of recorder, that adds records to series
          schema:
            type: string
        - in: query
          name: created_from
          description: Starting date for serieses filtering
          schema:
            type: string
            format: date-time
        - in: query
          name: created_to
          description: Ending date for serieses filtering
          schema:
            type: string
            format: date-time
        - in: query
          name: min_duration
          description: Minimum duration for serieses filtering
          schema:
            type: number
        - in: query
          name: max_duration
          description: Maximum duration for serieses filtering
          schema:
            type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Series'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
    post:
      tags:
        - series
      summary: Add a new series
      operationId: app.api.new_series
      requestBody:
        description: Series object that will be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Series'
      responses:
        200:
          description: Series added successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        405:
          $ref: '#/components/responses/MethodNotAllowed'
  /series/{series_uid}:    
    get:
      tags:
        - series
      summary: Find series by UID and return
      operationId: app.api.get_series
      parameters:
        - name: series_uid
          in: path
          description: UID of series to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - series
      summary: Update series
      operationId: app.api.update_series
      requestBody:
        description: Series object that will be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Series'
      parameters:
        - in: path
          name: series_uid
          description: UID of series that will be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Series added successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - series
      summary: Deletes a series
      operationId: app.api.delete_series
      parameters:
      - name: series_uid
        in: path
        description: Series uid to delete
        required: true
        schema:
          type: string
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
  /record:    
    get:
      tags:
        - record
      summary: Return all records
      operationId: app.api.get_records
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
    post:
      tags:
        - record
      summary: Register a new record
      operationId: app.api.new_record
      requestBody:
        description: Record object that will be registered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      responses:
        200:
          description: Record added successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
  /record/{record_uid}:    
    get:
      tags:
        - record
      summary: Find record by UID and return
      operationId: app.api.get_record
      parameters:
        - name: record_uid
          in: path
          description: UID of record to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - record
      summary: Update record
      operationId: app.api.update_record
      requestBody:
        description: Record object that will be registered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      parameters:
        - in: path
          name: record_uid
          description: UID of record that will be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Record added successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - record
      summary: Deletes a record
      operationId: app.api.delete_record
      parameters:
        - in: path
          name: record_uid
          description: Record uid to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Record deleted successfuly.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
  /record/{record_uid}/file:
    get:
      tags:
        - record
      summary: Download sound record file
      operationId: app.api.download_record
      parameters:
        - in: path
          name: record_uid
          description: UID of record that file of will be downloaded
          required: true
          schema:
            type: string
      responses:
        200:
          description: A record wav file
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - record
      summary: Upload sound record file
      operationId: app.api.upload_record
      requestBody:
        content:
          audio/wav:
            schema:
              type: string
              format: binary
      parameters:
        - in: path
          name: record_uid
          description: UID of record that file of will be updated
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/NotPermitted'
        404:
          $ref: '#/components/responses/NotFound'

components:

  responses:
    NoContent:
      description: NoContent
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotPermitted:
      description: Operation not permitted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MethodNotAllowed:
      description: Method is not allowed for this type of input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Recorder:
      type: object
      required:
        - uid
      properties:
        uid:
          type: string
        location_description:
          type: string
    Series:
      type: object
      required:
        - uid
        - recorder_uid
      properties:
        uid:
          type: string
        recorder_uid:
          type: string
        created_at:
          type: string
          format: date-time
        min_duration:
          type: number
        max_duration:
          type: number
    Record:
      type: object
      required:
        - uid
        - series_uid
      properties:
        uid:
          type: string
        series_uid:
          type: string
        duration:
          type: number
        samplerate:
          type: integer
        channels:
          type: integer
        start_time:
          type: string
          format: date-time
        uploaded_at:
          type: string
          format: date-time
        label:
          type: string
        filepath:
          type: string
    Error:
      type: object
      properties:
        detail:
          type: string